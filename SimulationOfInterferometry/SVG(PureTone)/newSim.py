import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq
import io

# Data pasted by the user
data_string = """
-56.763
-57.092
-58.297
-59.576
-58.474
-60.611
-60.382
-59.615
-60.74
-61.475
-62.513
-63.092
-63.08
-63.014
-63.18
-62.801
-66.411
-64.539
-65.397
-68.651
-66.408
-66.979
-69.545
-68.528
-71.097
-71.426
-69.698
-70.095
-68.437
-68.872
-66.996
-69.59
-67.658
-66.674
-66.32
-63.041
-64.027
-64.368
-63.016
-62.275
-62.835
-60.837
-60.367
-60.835
-60.441
-60.895
-60.723
-60.429
-58.133
-59.473
-58.121
-58.347
-59.297
-57.498
-57.571
-57.551
-58.051
-56.748
-56.419
-56.198
-55.92
-56.925
-56.12
-54.37
-56.037
-55.936
-55.684
-54.549
-54.964
-54.22
-53.297
-53.756
-54.151
-53.867
-54.012
-53.367
-54.241
-53.706
-52.927
-51.948
-52.322
-51.398
-52.533
-52.991
-52.021
-52.394
-50.88
-50.384
-50.219
-50.51
-51.163
-50.181
-52.008
-50.681
-50.24
-52.48
-51.715
-49.249
-50.588
-50.986
-49.696
-49.34
-49.834
-49.755
-50.579
-50.592
-49.71
-49.375
-48.629
-49.769
-48.164
-49.576
-48.77
-49.134
-48.964
-48.047
-48.139
-47.947
-47.991
-48.632
-48.252
-47.153
-47.5
-47.96
-48.602
-48.443
-47.632
-47.794
-47.106
-47.412
-46.947
-46.812
-47.003
-47.435
-46.512
-47.202
-45.924
-45.849
-46.682
-46.968
-46.262
-47.085
-45.918
-47.488
-46.845
-47.947
-46.482
-45.978
-46.48
-45.953
-46.127
-46.059
-46.256
-46.707
-46.656
-46.227
-45.721
-47.009
-45.729
-46.453
-45.03
-45.557
-45.618
-45.159
-45.501
-45.648
-46.43
-45.604
-44.823
-45.601
-45.471
-44.975
-46.062
-44.934
-46.268
-45.307
-45.407
-45.121
-45.565
-45.953
-45.207
-45.048
-44.708
-44.442
-45.492
-46.4
-44.86
-46.191
-44.404
-45.365
-44.419
-44.843
-45.654
-44.525
-45.03
-45.236
-44.898
-44.031
-46.912
-44.022
-43.722
-44.16
-45.745
-45.033
-44.287
-45.784
-44.143
-45.951
-44.622
-44.335
-45.268
-44.856
-44.584
-45.227
-44.534
-45.219
-45.166
-45.013
-45.974
-45.195
-45.189
-44.107
-44.822
-44.248
-43.819
-44.107
-45.433
-44.807
-44.698
-45.039
-43.8
-44.29
-45.04
-43.71
-45.609
-43.774
-44.595
-43.99
-44.833
-44.842
-45.039
-44.592
-44.616
-45.11
-44.975
-44.745
-45.438
-46.021
-44.689
-44.604
-44.641
-44.878
-44.282
-44.525
-47.041
-44.633
-46.194
-44.639
-45.917
-43.925
-45.501
-45.558
-45.463
-45.166
-45.455
-45.545
-45.263
-46.612
-45.542
-46.605
-46.127
-45.245
-45.436
-45.912
-46.635
-45.272
-45.007
-46.074
-44.872
-46.152
-46.599
-45.104
-46.239
-46.447
-46.135
-45.809
-46.324
-47.614
-47.359
-47.491
-47.065
-46.822
-46.53
-46.402
-45.956
-47.829
-46.317
-46.444
-47.226
-48.44
-46.5
-47.265
-47.068
-46.691
-48.714
-46.474
-47.276
-47.6
-48.138
-47.268
-47.686
-47.462
-48.183
-48.499
-49.049
-49.531
-49.267
-47.682
-48.017
-48.641
-48.164
-47.438
-48.435
-48.249
-49.854
-49.878
-48.996
-50.068
-48.946
-49.552
-49.534
-49.472
-49.34
-51.634
-50.319
-50.525
-50.481
-51.956
-50.769
-51.774
-50.891
-51.68
-51.189
-51.357
-52.079
-49.907
-52.239
-53.615
-52.061
-52.565
-51.986
-54.202
-53.67
-53.298
-54.27
-53.875
-55.131
-53.682
-54.176
-55.249
-55.363
-54.385
-54.732
-54.305
-55.331
-55.214
-56.078
-54.937
-56.46
-57.639
-57.366
-58.306
-58.322
-58.314
-59.503
-58.364
-58.422
-58.439
-60.526
-61.476
-59.519
-59.059
-62.957
-61.19
-61.78
-65.138
-65.365
-59.838
-63.116
-67.386
-64.186
-63.79
-62.028
-66.502
-67.658
-64.697
-68.054
-65.773
-70.148
-70.092
-70.809
-68.335
-65.911
-63.248
-66.661
-66.351
-63.724
-64.485
-61.106
-63.845
-65.309
-61.314
-63.116
-59.292
-62.198
-61.396
-59.32
-58.977
-58.777
-59.641
-59.194
-59.329
-57.621
-57.242
-57.84
-57.421
-57.757
-56.654
-57.621
-57.338
-55.189
-56.219
-56.801
-55.816
-54.879
-53.644
-54.258
-54.079
-53.961
-54.119
-53.638
-53.25
-54.849
-52.803
-53.015
-53.832
-51.818
-52.145
-51.892
-53.265
-52.096
-52.145
-53.212
-53.861
-53.006
-52.309
-52.341
-52.165
-51.011
-50.645
-51.174
-50.898
-50.622
-50.431
-50.248
-51.504
-50.681
-50.722
-51.88
-49.278
-49.543
-49.631
-49.91
-49.915
-50.36
-50.151
-50.516
-49.189
-49.813
-48.634
-49.478
-49.896
-48.479
-49.525
-48.899
-47.744
-48.12
-48.855
-49.44
-47.679
-48.738
-48.517
-47.876
-46.82
-47.747
-47.976
-46.788
-47.073
-47.253
-48.79
-47.294
-48.317
-47.597
-46.488
-47.691
-47.667
-48.139
-46.694
-46.207
-47.65
-47.546
-47.917
-46.646
-46.856
-46.885
-47.402
-46.835
-45.851
-46.359
-47.021
-46.61
-46.871
-47.006
-46.239
-46.441
-46.328
-46.832
-47.244
-46.588
-46.265
-46.315
-45.285
-47.4
-45.804
-46.039
-45.504
-45.954
-44.992
-45.951
-45.84
-45.893
-46.124
-46.074
-45.086
-45.301
-46.059
-45.166
-45.821
-44.792
-45.298
-45.512
-45.521
-46.35
-45.268
-45.371
-46.15
-45.612
-46.365
-45.571
-46.951
-45.316
-45.386
-44.701
-45.574
-45.524
-46.145
-45.301
-45.413
-45.399
-45.588
-44.61
-45.413
-45.433
-45.43
-46.647
-45.219
-44.553
-46.859
-44.426
-44.732
-45.252
-44.892
-44.986
-47.153
-45.112
-44.178
-44.584
-44.639
-45.13
-44.839
-44.927
-44.437
-44.401
-44.319
-44.913
-45.571
-45.07
-45.289
-44.948
-44.83
-45.299
-44.663
-44.352
-44.358
-44.474
-45.445
-44.437
-44.798
-45.239
-44.613
-44.976
-45.718
-45.069
-44.472
-45.892
-44.32
-46.982
-45.402
-46.635
-45.694
-44.575
-45.094
-44.8
-45.945
-45.004
-45.489
-45.971
-45.033
-45.189
-45.651
-46.702
-44.816
-45.433
-45.255
-45.542
-46.142
-44.93
-46.882
-45.383
-46.258
-45.754
-44.56
-45.408
-46.377
-45.185
-45.751
-46.386
-45.342
-45.956
-47.188
-46.339
-47.035
-45.992
-47.644
-45.777
-47.086
-45.709
-47.25
-47.45
-47.05
-47.412
-46.142
-46.353
-47.106
-46.127
-46.486
-47.385
-46.771
-47.024
-46.265
-46.158
-47.629
-47.053
-47.559
-48.055
-47.504
-48.117
-47.808
-47.916
-48.759
-47.429
-47.444
-47.626
-48.288
-48.423
-47.761
-48.429
-49.505
-47.735
-48.405
-48.834
-47.788
-49.672
-47.908
-50.484
-48.576
-48.784
-48.696
-50.61
-50.542
-50.604
-51.31
-49.419
-50.91
-49.866
-50.21
-50.852
-51.774
-50.962
-50.616
-52.214
-50.324
-52.197
-50.972
-50.425
-52.065
-51.754
-51.648
-51.53
-51.659
-50.925
-54.196
-53.176
-51.345
-52.497
-53.803
-54.343
-53.932
-53.997
-54.876
-53.517
-53.291
-55.38
-55.787
-54.061
-54.214
-56.295
-56.581
-55.981
-56.878
-56.004
-57.091
-57.075
-58.311
-58.115
-58.591
-59.179
-59.226
-60.343
-59.189
-61.799
-57.025
-60.623
-61.487
-61.866
-63.608
-62.457
-65.338
-64.665
-64.985
-67.803
-67.225
-62.584
-69.211
-69.107
-66.862
-71.895
-69.905
-70.942
-70.374
-70.777
-71.194
-67.449
-69.089
-65.388
-66.75
-63.433
-63.693
-64.433
-62.372
-64.392
-62.193
-60.826
-58.985
-61.231
-61.063
-59.921
-59.514
-59.853
-59.4
-58.477
-59.165
-59.726
-59.306
-58.314
-56.975
-56.872
-57.618
-57.66
-57.359
-56.595
-54.52
-57.277
-55.963
-56.254
-55.825
-54.814
-54.831
-53.761
-54.467
-53.467
-54.029
-53.885
-53.782
-54.526
-52.619
-52.306
-53.926
-53.256
-52.95
-52.347
-53.332
-52.697
-54.179
-53.231
-51.854
-51.709
-52.51
-51.174
-51.14
-51.704
-52.35
-51.083
-50.669
-52.105
-50.675
-51.427
-49.949
-51.395
-50.601
-50.228
-50.559
-51.594
-50.151
-49.881
-48.596
-49.023
-48.92
-49.077
-48.902
-50.01
-49.04
-47.761
-47.312
-49.152
-46.8
-48.026
-48.343
-47.985
-47.031
-48.296
-48.072
-47.541
-47.065
-47.026
-47.57
-47.244
-46.271
-46.765
-47.764
-48.299
-47.203
-47.685
-46.965
-46.585
-47.056
-46.677
-46.236
-46.741
-46.497
-46.474
-45.098
-45.733
-45.531
-45.679
-46.021
-47.406
-46.341
-46.724
-46.672
-46.1
-46.183
-46.33
-46.394
-45.46
-45.536
-46.365
-45.986
-45.992
-45.148
-46.244
-44.957
-46.541
-45.762
-45.148
-44.954
-46.053
-44.586
-47.069
-46.612
-45.207
-45.395
-44.614
-44.889
-45.427
-44.101
-44.936
-46.039
-45.432
-45.498
-44.557
-44.422
-45.642
-44.839
-44.566
-44.661
-45.336
-44.919
-44.354
-44.173
-44.804
-44.891
-44.563
-43.99
-45.121
-44.994
-44.877
-45.192
-44.785
-44.084
-44.748
-44.275
-44.435
-44.992
-44.154
-43.243
-46.259
-44.47
-44.904
-44.46
-44.175
-45.801
-45.41
-44.698
-44.09
-44.469
-43.375
-44.786
-43.981
-45.338
-44.96
-44.766
-43.968
-43.856
-44.029
-45.345
-44.863
-45.912
-45.451
-45.58
-45.417
-44.469
-44.719
-45.876
-44.342
-44.231
-44.299
-43.522
-44.007
-45.751
-45.868
-44.772
-44.448
-44.503
-45.983
-45.63
-45.195
-46.033
-45.316
-45.057
-45.042
-45.618
-45.171
-45.121
-45.577
-44.536
-45.435
-45.656
-44.401
-45.467
"""
# 1. Process the data
# Use io.StringIO to simulate reading a file
data = pd.read_csv(io.StringIO(data_string), header=None)
calibration_power = data[0]

# Create the displacement axis from 0 to 1000 um
num_points = len(calibration_power)
calibration_displacement = np.linspace(0, 1000, num_points)

# --- Plot 1: Calibration Curve ---
plt.figure(figsize=(10, 6))
plt.plot(calibration_displacement, calibration_power)
plt.title('Calibration Curve')
plt.xlabel('Mirror Displacement (µm)')
plt.ylabel('Power (arbitrary units)')
plt.grid(True)
plt.savefig('calibration_curve.svg')
plt.close() # Close the figure to free up memory

# 2. Generate the Input Signal
# Simulation parameters
frequency = 300  # Hz
amplitude = 15   # um
sampling_rate = 20000  # Hz (Increased for better resolution)
duration = 0.1  # seconds

# Time array
time = np.linspace(0, duration, int(sampling_rate * duration), endpoint=False)

# Sinusoidal mirror vibration (input signal)
# A key step is to add a DC offset to the vibration. This places the signal
# on a specific 'operating point' of the calibration curve. A steep slope is
# ideal for high sensitivity. Based on your curve, ~600µm is a good choice.
dc_offset = 600 # um
input_displacement = dc_offset + amplitude * np.sin(2 * np.pi * frequency * time)

# --- Plot 2: Input Signal ---
plt.figure(figsize=(10, 6))
plt.plot(time, input_displacement, color='tab:blue')
plt.title('Input Signal: Mirror Vibration')
plt.xlabel('Time (s)')
plt.ylabel('Displacement (µm)')
plt.grid(True)
plt.savefig('input_signal.svg')
plt.close()

# 3. Simulate the Output Power
# Use NumPy's interpolation function to find the power for each displacement value
output_power = np.interp(input_displacement, calibration_displacement, calibration_power)

# --- Plot 3: Output Power ---
plt.figure(figsize=(10, 6))
plt.plot(time, output_power, color='tab:red')
plt.title('Simulated Output Power')
plt.xlabel('Time (s)')
plt.ylabel('Power (arbitrary units)')
plt.grid(True)
plt.savefig('output_power.svg')
plt.close()

# --- Plot 4: Comparison Plot ---
fig, ax1 = plt.subplots(figsize=(12, 7))
ax1.set_title('Input Signal vs. Output Power', fontsize=16)
ax1.set_xlabel('Time (s)')

# Plotting the input displacement
ax1.set_ylabel('Displacement (µm)', color='tab:blue', fontsize=12)
ax1.plot(time, input_displacement, color='tab:blue', label='Input Displacement')
ax1.tick_params(axis='y', labelcolor='tab:blue')
ax1.grid(True, linestyle='--')

# Creating a second y-axis for the output power
ax2 = ax1.twinx()
ax2.set_ylabel('Output Power (arbitrary units)', color='tab:red', fontsize=12)
ax2.plot(time, output_power, color='tab:red', alpha=0.9, label='Output Power')
ax2.tick_params(axis='y', labelcolor='tab:red')

fig.tight_layout()
plt.savefig('comparison.svg')
plt.close()

# 4. Verify the Frequency with FFT
N = len(output_power)
# Remove the DC component from the output signal before FFT for a cleaner plot
yf = fft(output_power - np.mean(output_power))
xf = fftfreq(N, 1 / sampling_rate)

# We only care about the positive frequencies
positive_mask = xf > 0
xf_positive = xf[positive_mask]
yf_positive = 2.0/N * np.abs(yf[positive_mask])

# Find the peak frequency
peak_frequency_index = np.argmax(yf_positive)
peak_frequency = xf_positive[peak_frequency_index]
peak_amplitude = yf_positive[peak_frequency_index]


# --- Plot 5: FFT Analysis ---
plt.figure(figsize=(10, 6))
plt.plot(xf_positive, yf_positive)
plt.title('Frequency Analysis (FFT) of Output Power')
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.grid(True)
# Add a vertical line and text to mark the peak frequency
plt.axvline(peak_frequency, color='r', linestyle='--', label=f'Peak: {peak_frequency:.2f} Hz')
plt.text(peak_frequency + 20, peak_amplitude * 0.9, f'{peak_frequency:.2f} Hz', color='r')
plt.legend()
# Limit x-axis to a reasonable range to see the fundamental and first few harmonics
plt.xlim(0, 1000)
plt.savefig('fft_analysis.svg')
plt.close()

print("Simulation complete! All plots have been generated.")
print(f"Input signal frequency: {frequency} Hz")
print(f"Detected peak frequency in output signal: {peak_frequency:.2f} Hz")